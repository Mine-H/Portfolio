@phone-req: ~"screen and ((orientation: portrait) or (max-width: 800px))";
@not-phone-req: ~"not @{phone-req}";



#mixin_b {
	// light/dark modes color references
	.get_c(text)	{ @light:#020203; @dark:#FFFFFF; }
	.get_c(body)	{ @light:{def:#C5C5D3;hov:#C5C5D3;}; @dark:{def:#040406;hov:#040406;}; }
	.get_c(s_1)		{ @light:{def:#F9F9FB;hov:#E7E7EF;}; @dark:{def:#131420;hov:#0A0B12;}; }
	.get_c(s_2)		{ @light:{def:#F0F0F5;hov:#DADAE7;}; @dark:{def:#0E0F17;hov:#07080C;}; }

	.mode-color(@ruleset, @var-name) {
		& {
			@c: .get_c(@var-name);
			
			@c-ref: @c[@dark]; @ruleset();
			body.light-mode & { @c-ref: @c[@light]; @ruleset(); }
		}
	}
	.mode-color(@ruleset, @var-name, body) {
		& {
			@c: .get_c(@var-name);
			
			@c-ref: @c[@dark]; @ruleset();
			&.light-mode { @c-ref: @c[@light]; @ruleset(); }
		}
	}

	.find(@list, @vals) {
		@returnlist: {
			each(@list, .(@v, @k, @i) { each(@vals, .(@v2, @k2, @i2) {
				& when (@v=@v2) { color: white; }
			}); });
		};
		@return: boolean(isdefined(@returnlist[color]));
	}
	
	.borders(@border-style, all) { border: @border-style; }
	.borders(@border-style, @rest...) when (length(@rest) > 0) {
		& when (.find(@rest, t top)[])		{ border-top: @border-style; }
		& when (.find(@rest, r right)[]) 	{ border-right: @border-style; }
		& when (.find(@rest, b bottom)[])	{ border-bottom: @border-style; }
		& when (.find(@rest, l left)[])		{ border-left: @border-style; }
	}

	.quick-bg(@var-name, @is-hover: false, @is-body: false) {
		@ruleset: if((@is-hover) or (@is-hover=hover) or (@is-hover=h),
			{ background-color: @c-ref[hov]; }, { background-color: @c-ref[def]; });

		& when (@is-body), (@is-body=body) { .mode-color(@ruleset, @var-name, body); }
		& when not (@is-body=body) { .mode-color(@ruleset, @var-name); }
	}
} // mixin bundle

@card-txt-color: #FFFFFF; @card-bg-color: #000000;